//
//
//  treemain.cpp
//  Created by Guanhua Yang on 11/15/15.
//  Copyright (c) 2015 Guanhua Yang. All rights reserved.
//
//

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <random>
#include <cassert>
#include "SearchTree.h"
#include "AVLTree.h"

using std::cout;
using std::endl;
using std::to_string;
using std::string;
using std::vector;
using SeedType = std::random_device::result_type; // Seed type for random number generator
using RandGen = std::default_random_engine; // Type for random number generator
constexpr auto NEW_SEED_ARG = "newseed";
constexpr auto seedName = "SEED.txt"; // Filename to hold most recent seed
SeedType getSeed(int, const char* []);


/*
 Print the (key, value) pairs in the tree according to the order
 provided by the tree's iterator.
 */
void printValues(const SearchTree& st, const  string& name) {
    cout << "Tree " << name << " size " <<  st.size() << '\n';
    for (const auto& p : st) {
        cout << p << " ";
    }
    cout << '\n';
}

/*
 Get the seed for the random number generator
 
 The last seed is stored in the file named in seedName. If that file
 exists and seedOption is not "new", use that value again. This
 will repeat the random sequence used in the last run.
 
 If that file does not exist or it exists but if the command line
 Argument 1 is "new", use a fresh seed generated by std::random_device.
 */
SeedType getSeed(int argc, const char* argv[]) {
    bool forceNew {}; // True == force a new seed
    if (argc < 2)
        forceNew = false;
    else
        forceNew = string(argv[1]) == NEW_SEED_ARG;
    
    auto seed = std::random_device()(); // Fresh seed
    
    // Select fresh seed or last seed, as necessary
    std::ifstream seedIn{seedName};
    if (seedIn) { // File exists
        if (forceNew) {
            cout << "New seed " << seed << endl << endl;
        }
        else { // Reuse seed from file
            seedIn >> seed;
            cout << "Reusing seed " << seed << endl << endl;
        }
        seedIn.close();
    }
    else
        cout << "Creating first seed " << seed << endl << endl;
    
    // Save the chosen seed
    std::ofstream seedOut{seedName, std::ios_base::trunc | std::ios_base::out};
    assert(seedOut);
    seedOut << seed;
    seedOut.close();
    return seed;
}

//sorting routine : insertion sort
vector<int> insertionsort(vector<int> & seq)
{
    int j,val;
    for(int i=1;i<seq.size();i++)
    {
        val = seq[i];
        j=i-1;
        while(j>=0 && seq[j]>val){
            seq[j+1] = seq[j];
            j=j-1;
        }
        seq[j+1] = val;
    }
    return seq;
}

//assignment start here
int main(int argc, const char* argv[]) {
    
    // Set the seed for the random number generator
    SeedType seed {getSeed(argc, argv)};
    RandGen rand{seed};
    
    //n represent size of the random sequence, m represent the interval to pick number
    int n=10;
    int m=10000;
    
    //key of the tree structure
    int key;
    
    //defined two empty tree structure for inserting random number
    SearchTree randst {};
    AVLTree randavl {};
    
    //define a vector to store the key
    vector<int> seqa;
    vector<int> seqb;
    
    //for inserting random number search tree
    cout << "1.inserting "<< n <<" random item into search tree.";
    cout << endl;
    while(true)
    {
        key = rand() % m;
        string str_key=to_string(key);
        auto finds = std::find(seqa.begin(),seqa.end(),key);
        if(finds==seqa.end())
        {
            randst.insert(key,str_key);
            seqa.push_back(key);
            if(seqa.size()==n)
                break;
        }
    }
    cout << endl;
    cout << "the number of comparison of random search tree case is " << randst.getComparisons();
    cout << endl;
    cout << endl;
    
    //for inserting random number avl tree
    cout << "2.inserting "<< n <<" random item into avl tree.";
    cout << endl;
    while(true)
    {
        key= rand() % m;
        string str_key=to_string(key);
        auto finda = std::find(seqb.begin(),seqb.end(),key);
        if(finda==seqb.end())
        {
            randavl.insert(key,str_key);
            seqb.push_back(key);
            if(seqb.size()==n)
                break;
        }
    }
    cout << endl;
    cout << "the number of comparison of random avl tree case is " << randavl.getComparisons();
    cout << endl;
    cout << endl;
    
    //now call insertionsort to sort both sequence seqa && seqb
    insertionsort(seqa);
    insertionsort(seqb);
    
    //defined two empty tree structure ready for inserting sorted random number
    SearchTree sorted_randst {};
    AVLTree sorted_randavl {};
    
    //now insert the sorted sequence into its corresponding tree
    //for inserting sorted random number into search tree
    cout << "3.inserting "<< n <<" sorted random item into sorted search tree.";
    cout << endl;
    for(int i=0;i<n;i++)
    {
        string str_seqa=to_string(seqa[i]);
        sorted_randst.insert(seqa[i],str_seqa);
    }
    cout << endl;
    cout << "the number of comparison of the sorted search tree case is " << sorted_randst.getComparisons();
    cout << endl;
    cout << endl;
    
    //for inserting sorted random number into avl tree
    cout << "4.inserting "<< n <<" sorted random item into sorted avl tree.";
    cout << endl;
    for(int i=0;i<n;i++)
    {
        string str_seqb=to_string(seqb[i]);
        sorted_randavl.insert(seqb[i],str_seqb);
    }
    cout << endl;
    cout << "the number of comparison of the sorted avl tree case is " << sorted_randavl.getComparisons();
    cout << endl;
    cout << endl;
    return 0;
}
